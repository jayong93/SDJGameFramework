#include "stdafx.h"
#include "Components.h"
#include "HandleManagers.h"
#include "Framework.h"
\
<%def name="enum_getter(cname, vname, type)">\
[](${cname}& c) { return std::string(${cname}::stringFrom${type}[size_t(c.${vname})]);}\
</%def>\
<%def name="enum_setter(cname, vname, type)">\
[](${cname}& c, std::string& str)\
{\
auto it = ${cname}::stringTo${type}.find(str);\
if(it != ${cname}::stringTo${type}.end())\
c.${vname} = it->second;\
}\
</%def>\
<%def name="table_setter(cname, vname, type)">\
[](${cname}& c, sol::object v) \
{ \
if (v.is<${type}>()) \
c.${vname} = v.as<${type}>(); \
else if(v.is<sol::table>()) \
c.${vname} = v.as<sol::table>(); \
}\
</%def>\

% for c in data:
\
    % if c.get("enum"):
    % for e in c["enum"]:
const char* ${c["name"]}::stringFrom${e["type"]}[] = { \
        % for val in e["value"]:
"${val}"${', ' if not loop.last else ' '}\
        % endfor
};
const std::map<std::string, ${c["name"]}::${e["type"]}> ${c["name"]}::stringTo${e["type"]} = ${c["name"]}::GetEnum${e["type"]}Map();
std::map<std::string, ${c["name"]}::${e["type"]}> ${c["name"]}::GetEnum${e["type"]}Map()
{
    std::map<std::string, ${c["name"]}::${e["type"]}> map;
    int i=0;
    for (auto n : stringFrom${e["type"]})
        map[n] = ${c["name"]}::${e["type"]}(i++);
    return map;
}
    % endfor
    % endif

void ${c["name"]}::RegisterInLua()
{
    FW.typeTable.new_usertype<${c["name"]}>("${c["name"]}",
        "new", sol::no_constructor,
        "get", [](uint64_t id) {return CM.GetBy<${c["name"]}>(id);},
        "handle", &${c["name"]}::handle,
        "owner", &${c["name"]}::owner,
    % if c.get("simple_var"):
    % for v in c["simple_var"]:
        "${v["name"]}", \
        % if v.get("table_setter"):
sol::property([](${c["name"]}& compo){return compo.${v["name"]};}, ${table_setter(c["name"], v["name"], v["type"])}),
        % else:
&${c["name"]}::${v["name"]},
        % endif
    % endfor
    % endif
    % if c.get("multi_name_var"):
    % for v in c["multi_name_var"]:
        % for n in v["name"]:
        "${n}", &${c["name"]}::${n},
        % endfor
    % endfor
    % endif
    % if c.get("enum"):
    % for v in c["enum"]:
        "${v["name"]}", sol::property(${enum_getter(c["name"], v["name"], v["type"])},
            ${enum_setter(c["name"], v["name"], v["type"])})${',' if not loop.last else ''}
    % endfor
    % endif
    );
}

% endfor